// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

enum BoardType {
  SPRINT
  KANBAN
}

enum TicketStatus {
  TODO
  IN_PROGRESS
  IN_REVIEW
  DONE
}

model Board {
  id          String        @id @default(cuid())
  type        BoardType
  title       String
  description String?
  startDate   DateTime
  endDate     DateTime
  columns     BoardColumn[]
  tickets     BoardTicket[]
}

model BoardColumn {
  id          String        @id @default(cuid())
  position    Int
  label       TicketStatus  @default(TODO)
  board       Board         @relation(fields: [boardId], references: [id])
  boardId     String
  BoardTicket BoardTicket[]
}

model User {
  id              String        @id @default(cuid())
  name            String?
  email           String?
  emailVerified   Boolean?
  image           String?
  assignedTickets BoardTicket[] @relation("AssignedUser")
  reportedTickets BoardTicket[] @relation("ReportedUser")
  comments        Comment[]
}

model BoardTicket {
  id            String       @id @default(cuid())
  title         String
  description   String?
  assignedUser  User         @relation(name: "AssignedUser", fields: [assignedTo], references: [id])
  assignedTo    String
  reportedUser  User         @relation(name: "ReportedUser", fields: [reportedBy], references: [id])
  reportedBy    String
  boardColumn   BoardColumn? @relation(fields: [boardColumnId], references: [id])
  boardColumnId String?
  status        TicketStatus @default(TODO)
  board         Board        @relation(fields: [boardId], references: [id])
  boardId       String
  comments      Comment[]
  storyPoints   Int?
  position      Int
}

model Comment {
  id            String       @id @default(cuid())
  description   String?
  commenter     User?        @relation(fields: [writtenBy], references: [id])
  writtenBy     String?
  createdAt     DateTime     @default(now())
  boardTicket   BoardTicket? @relation(fields: [boardTicketId], references: [id])
  boardTicketId String?
}
